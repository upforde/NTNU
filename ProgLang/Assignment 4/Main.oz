functor
import
    System
    Application
    OS
define
    \insert Implementation.oz

%=========================== Task 1 ===========================
    {System.show {GenerateOdd ~3 10}}
    {System.show {GenerateOdd 3 3}}
    {System.show {GenerateOdd 2 2}}

    % As showed by the System.show calls, the function 
    % GenerateOdd works as described in the assignment.

%=========================== Task 2 ===========================
    {System.show {Product [1 2 3 4]}}

    % As showed by the System.show calls the function Product
    % works as described in the assignment.

%================ Disclaimer for tasks 3 and 4 ================

    % This code has been written outside of the Oz environment, 
    % meaning that the Browse function does not work. However, 
    % the code has been tested in the Oz environment to aquire
    % the results needed to answer some questions that are posed
    % in the assignment.

%=========================== Task 3 ===========================
    local Streamed Hams in
        thread Streamed = {GenerateOdd 0 1000} end
        thread Hams = {Product Streamed} end
        % {Browse Hams}
    end

    % To make the Browse statement show digits other than the 
    % full product of the entire list, one has to include a 
    % Browse statement in the product function itself, as the
    % Product function does not return anything before the entire
    % calculation is completed. After including that, the digits
    % that show up are 1, 3 and 15. This is because the first digit
    % to be multiplied is 1, after that 1 and 3 are multiplied, 
    % resulting in 3, and after that, 3 and 5 are multiplied, 
    % resulting in 15.

    % The benefit of running these two functions on sepparate threads
    % is that the calculations are happening "at the same time". The 
    % numbers are being multiplied as they are getting generated by the 
    % GenerateOdd function, or in other words, the Product function waits
    % until the next number is generated before multiplying it with the
    % previous.

%=========================== Task 4 ===========================
    local Streamed Hams in
        thread Streamed = {LazyGenerateOdd 0 1000} end
        thread Hams = {Product Streamed} end
        % {Browse Hams}
    end
    
%=========================== Task 5 ===========================
% a)
    local HammerTime B in
        HammerTime = {HammerFactory}
        B = HammerTime.2.2.2.1
        {System.show HammerTime}
    end

    % As showed by the System.show HammerTime, the function 
    % HammerFactory works as described in the assignment.

% b)
    local HammerTime Consumer in
        HammerTime = {HammerFactory}
        Consumer = {HammerConsumer HammerTime 10}
        {System.show Consumer}
    end

    % After 10 seconds, the customer tells us how many hammers
    % are working

% c)
    proc {BoundedBuffer N ?Xs Ys}
        fun {Startup N ?Xs}
            if N==0 then
                Xs
            else Xr in
                Xs = _|Xr
                {Startup N-1 Xr}
            end
        end

        proc {AskLoop Ys ?Xs ?End}
            case Ys of Y|Yr then Xr End2 in
                Xs = Y|Xr
                End = _|End2
                {AskLoop Yr Xr End2}
            end
        end

        End = {Startup N Xs} in
        {AskLoop Ys Xs End}
    end

    local HammerTime Consumer Buffer in
        HammerTime = {HammerFactory}
        {BoundedBuffer 6 Buffer HammerTime}
        {Delay 6000}
        Consumer = {HammerConsumer Buffer 10}
        {System.show Consumer}
    end

    {Application.exit 0}
end